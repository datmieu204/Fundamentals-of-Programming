#include <iostream>

using namespace std;

const int MAX_N = 100;
const int MAX_M = 100;

int n, m;
int maze[MAX_N][MAX_M];
bool visited[MAX_N][MAX_M];

void input();
bool isValid(int x, int y);
bool findPath(int x, int y);
void print();

int main() {
    input();
    print();
    return 0;
}

void input(){
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> maze[i][j];
            visited[i][j] = false; // Ban đầu chưa ghé thăm bất kỳ ô nào
        }
    }
}

// Kiểm tra ô (x,y) có nằm trong mê cung không và có thể đi qua không
bool isValid(int x, int y) {
    if (x < 0 || x >= n || y < 0 || y >= m) {
        return false;
    }
    if (maze[x][y] == 1 || visited[x][y]) {
        return false;
    }
    return true;
}

// Hàm đệ quy tìm đường đi
bool findPath(int x, int y) {
    visited[x][y] = true;
    if (x == n - 1 && y == m - 1) {
        return true; // Tìm thấy đường đi đến ô đích
    }
    if (isValid(x + 1, y)) {
        if (findPath(x + 1, y)) {
            return true;
        }
    }
    if (isValid(x, y + 1)) {
        if (findPath(x, y + 1)) {
            return true;
        }
    }
    visited[x][y] = false; // Không tìm thấy đường đi từ ô (x,y) nên đánh dấu là chưa ghé thăm
    return false;
}

void print(){
    if (findPath(0, 0)) {
        // In ra mê cung với các ô trong đường đi được đánh số 2
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (visited[i][j]) {
                    cout << "2 ";
                } else {
                    cout << maze[i][j] << " ";
                }
            }
            cout << endl;
        }
    } else {
        cout << "Khong co duong di" << endl;
    }
}
